/* ===========================================
   FONT AWESOME CHESS PIECES IMPLEMENTATION
   =========================================== */

// 1. Add this to your HTML <head> in templates/index.html:
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

// 2. Replace the displayBoard function in script.js:
displayBoard(boardState) {
    const pieceMap = {
        'K': { symbol: '<i class="fas fa-chess-king"></i>', class: 'piece-king' },
        'R': { symbol: '<i class="fas fa-chess-rook"></i>', class: 'piece-rook' },
        'B': { symbol: '<i class="fas fa-chess-bishop"></i>', class: 'piece-bishop' },
        'N': { symbol: '<i class="fas fa-chess-knight"></i>', class: 'piece-knight' },
        'x': { symbol: '', class: '' }
    };

    for (let i = 0; i < 16; i++) {
        const square = document.getElementById(`square-${i}`);
        const piece = boardState[i];
        const pieceInfo = pieceMap[piece] || { symbol: piece, class: '' };
        
        // Use innerHTML instead of textContent for icons
        square.innerHTML = pieceInfo.symbol;
        square.className = square.className.replace(/piece-\w+/g, '');
        
        if (pieceInfo.class) {
            square.classList.add(pieceInfo.class);
        }
        
        square.classList.remove('highlight', 'goal-row');
        
        if (i < 4 && piece === 'N') {
            square.classList.add('goal-row');
        }
    }
}

// 3. Add this CSS for better Font Awesome styling:
.square i {
    font-size: 2.5em;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
}

/* ===========================================
   SVG CHESS PIECES (CUSTOM IMPLEMENTATION)
   =========================================== */

// Create SVG pieces for ultimate control:
const svgPieces = {
    'K': `<svg viewBox="0 0 45 45" class="chess-piece piece-king">
            <path d="M 22.5,11.63 L 22.5,6" style="fill:none;stroke:#FFD700;stroke-width:1.5"/>
            <path d="M 20,8 L 25,8" style="fill:none;stroke:#FFD700;stroke-width:1.5"/>
            <path d="M 22.5,25 C 22.5,25 27,17.5 25.5,14.5 C 25.5,14.5 24.5,12 22.5,12 C 20.5,12 19.5,14.5 19.5,14.5 C 18,17.5 22.5,25 22.5,25" style="fill:#FFD700;stroke:#FFD700;stroke-width:1.5;stroke-linecap:round;stroke-linejoin:round"/>
          </svg>`,
    'R': `<svg viewBox="0 0 45 45" class="chess-piece piece-rook">
            <path d="M 9,39 L 36,39 L 36,36 L 9,36 L 9,39 z" style="fill:#4169E1;stroke:#4169E1"/>
            <path d="M 12,36 L 12,32 L 33,32 L 33,36 L 12,36 z" style="fill:#4169E1;stroke:#4169E1"/>
            <path d="M 11,14 L 11,9 L 15,9 L 15,11 L 20,11 L 20,9 L 25,9 L 25,11 L 30,11 L 30,9 L 34,9 L 34,14" style="fill:#4169E1;stroke:#4169E1"/>
          </svg>`,
    // ... more SVG pieces
};

/* ===========================================
   CHESS.COM STYLE PIECES (URL-BASED)
   =========================================== */

// Use Chess.com piece images:
const chessPieceImages = {
    'K': 'https://images.chesscomfiles.com/chess-themes/pieces/neo/150/wk.png',
    'R': 'https://images.chesscomfiles.com/chess-themes/pieces/neo/150/wr.png',
    'B': 'https://images.chesscomfiles.com/chess-themes/pieces/neo/150/wb.png',
    'N': 'https://images.chesscomfiles.com/chess-themes/pieces/neo/150/wn.png'
};

// Implementation:
displayBoard(boardState) {
    for (let i = 0; i < 16; i++) {
        const square = document.getElementById(`square-${i}`);
        const piece = boardState[i];
        
        square.innerHTML = '';
        
        if (piece !== 'x' && chessPieceImages[piece]) {
            const img = document.createElement('img');
            img.src = chessPieceImages[piece];
            img.className = `chess-piece piece-${piece.toLowerCase()}`;
            img.style.width = '80%';
            img.style.height = '80%';
            square.appendChild(img);
        }
    }
} 